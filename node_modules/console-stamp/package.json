{
  "_from": "console-stamp",
  "_id": "console-stamp@0.2.9",
  "_inBundle": false,
  "_integrity": "sha512-jtgd1Fx3Im+pWN54mF269ptunkzF5Lpct2LBTbtyNoK2A4XjcxLM+TQW+e+XE/bLwLQNGRqPqlxm9JMixFntRA==",
  "_location": "/console-stamp",
  "_phantomChildren": {
    "escape-string-regexp": "1.0.5",
    "has-ansi": "2.0.0",
    "strip-ansi": "3.0.1"
  },
  "_requested": {
    "escapedName": "console-stamp",
    "fetchSpec": "latest",
    "name": "console-stamp",
    "raw": "console-stamp",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/console-stamp/-/console-stamp-0.2.9.tgz",
  "_shasum": "9c0cd206d1fd60dec4e263ddeebde2469209c99f",
  "_spec": "console-stamp",
  "_where": "D:\\Programming\\WEB\\Vue.js\\Stopwatch",
  "author": {
    "email": "stale@raknes.net",
    "name": "Ståle Raknes",
    "url": "http://github.com/starak"
  },
  "bugs": {
    "url": "https://github.com/starak/node-console-stamp/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Ståle Raknes",
      "url": "http://github.com/starak"
    },
    {
      "name": "Jotham Read",
      "url": "https://github.com/jotham"
    },
    {
      "name": "Christiaan Westerbeek",
      "url": "https://github.com/devotis"
    },
    {
      "name": "Leon Lucardie",
      "url": "https://github.com/Gameleon12"
    },
    {
      "name": "Steffan Donal",
      "url": "https://github.com/SteffanDonal"
    },
    {
      "name": "Sören Schwert",
      "url": "https://github.com/sisou"
    },
    {
      "name": "Fkscorpion",
      "url": "https://github.com/Fkscorpion"
    },
    {
      "name": "Alexis Tyler",
      "url": "https://github.com/OmgImAlexis"
    }
  ],
  "dependencies": {
    "chalk": "^1.1.1",
    "dateformat": "^1.0.11",
    "merge": "^1.2.0"
  },
  "deprecated": false,
  "description": "Patch NodeJS console methods in order to add timestamp information by pattern",
  "devDependencies": {
    "filesize": "^3.1.2",
    "moment": "^2.13.0"
  },
  "homepage": "https://github.com/starak/node-console-stamp#readme",
  "keywords": [
    "console",
    "debug",
    "jslog",
    "log",
    "timestamp"
  ],
  "license": "MIT",
  "main": "main",
  "name": "console-stamp",
  "optionalDependencies": {},
  "readme": "# console-stamp\n\n[![npm][npm-image]][npm-url]\n[![downloads][downloads-image]][downloads-url]\n[![build][build-img]][downloads-url]\n\n[npm-image]: https://img.shields.io/npm/v/console-stamp.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/console-stamp\n[build-img]: https://img.shields.io/circleci/project/github/starak/node-console-stamp/0.2.8.svg?style=flat-square\n[downloads-image]: https://img.shields.io/npm/dm/console-stamp.svg?style=flat-square\n[downloads-url]: https://npmjs.org/package/console-stamp\n\n## Attention! ##\n\nVersion 3.0.0 (! don't ask...) Release Candidate is now out! Try it out by using the `@next` tag like this:\n\n    npm install console-stamp@next\n    \nDocumentation for 3.0.0 can be found [here](https://github.com/starak/node-console-stamp/tree/3.0.0) for now... \n\n**Note:** There are breaking changes in the new version.\n\n--------------------------\n\nThis module enables you to patch the console's methods in Node.js, to add timestamp prefix based on a given string pattern, and more...\n\n## Usage ##\n\n### Install\n```console\nnpm install console-stamp\n```\n\n### Patching the console\n```js\nrequire('console-stamp')(console, [options]);\n```\n\n#### console\nThe global console or [custom console](#customconsole).\n\n#### options {Object|String}\n\nFrom version 2.0 the second parameter is an object with several options. As a backward compatibillity feature this parameter can be a string containing the pattern.\n\n* **options.pattern** {String}<br>A string with date format based on [Javascript Date Format](http://blog.stevenlevithan.com/archives/date-time-format)<br>**Default**: 'ddd mmm dd yyyy HH:MM:ss'\n\n* **options.formatter** {Function}<br>A custom date formatter that should return a formmatted date string.\n\n* **options.label** {Boolean}<br>If true it will show the label (LOG | INFO | WARN | ERROR)<br>**Default**: true\n\n* **options.labelPrefix** {String}<br>A custom prefix for the label.<br>For an example see [Custom prefix and suffix example](#custom-pre-and-suffixes)<br>**Default:** \"[\"\n\n* **options.labelSuffix** {String}<br>A custom suffix for the label.<br>For an example see [Custom prefix and suffix example](#custom-pre-and-suffixes)<br>**Default:** \"]\"\n\n* **options.include** {Array}<br>An array containing the methods to include in the patch<br>**Default**: [\"log\", \"info\", \"warn\", \"error\", \"dir\", \"assert\"]\n\n* **options.exclude** {Array}<br>An array containing the methods to exclude in the patch<br>**Default**: [] \\(none)\n\n* **options.disable** {Array}<br>An array containing the methods to disable in the patch<br>**Default**: [] \\(none)\n\n* **options.level** {String}<br>A string choosing the most verbose logging function to allow. Ordered/grouped as such: 'log dir', 'info', 'warn assert', 'error'<br>**Default**: log\n\n* **options.extend** {Object}<br>An object describing methods and their associated log level, to extend the existing `method <-> log level` pairs.<br>For an example see [Custom methods](#custommethods).\n\n* **options.metadata** {String/Object/Function}<br>Types can be String, Object (interpreted with util.inspect), or Function. See the test-metadata.js for examples.<br>**Note** that metadata can still be sent as the third parameter (as in vesion 1.6) as a backward compatibillity feature, but this is deprecated. <br>**Default**: undefined\n\n* **options.stdout** {WritableStream}<br>A custom `stdout` to use with [custom console](#customconsole).<br>**Default:** `process.stdout`\n\n* **options.stderr** {WritableStream}<br>A custom `stderr` to use with [custom console](#customconsole).<br>**Default:** `options.stdout` or `process.stdout`\n\n* **options.colors** {Object}<br>An object representing a color theme. More info [here](https://www.npmjs.com/package/chalk).\n\n    * **options.colors.stamp** {String/Array<String>/Function} <br>**Default:** []\n\n    * **options.colors.label** {String/Array<String>/Function} <br>**Default:** []\n\n    * **options.colors.metadata** {String/Array<String>/Function} <br>**Default:** []\n    \n* **options.datePrefix** {String}<br>A custom prefix for the datestamp.<br>For an example see [Custom prefix and suffix example](#custom-pre-and-suffixes)<br>**Default:** \"[\"\n\n* **options.dateSuffix** {String}<br>A custom suffix for the datestamp.<br>For an example see [Custom prefix and suffix example](#custom-pre-and-suffixes)<br>**Default:** \"]\"\nNote: To combine colors, bgColors and style, set them as an array like this:\n```js\n...\n    stamp: ['black', 'bgYellow', 'underline']\n...\n```\n\nOr chain Chalk functions like this:\n```js\n...\nstamp: require('chalk').red.bgYellow.underline;\n...\n```\n\nNote also that by sending the parameter `--no-color` when you start your node app, will prevent any colors from console.\n```console\n$ node my-app.js --no-color\n```\n### Example\n```js\n// Patch console.x methods in order to add timestamp information\nrequire('console-stamp')(console, { pattern: 'dd/mm/yyyy HH:MM:ss.l' });\n\nconsole.log('Hello World!');\n// -> [26/06/2015 14:02:48.062] [LOG] Hello World!\n\nconst port = 8080;\nconsole.log('Server running at port %d', port);\n// -> [26/06/2015 16:02:35.325] [LOG] Server running at port 8080\n```\n&nbsp;\n```js\nconsole.log('This is a console.log message');\nconsole.info('This is a console.info message');\nconsole.warn('This is a console.warn message');\nconsole.error('This is a console.error message');\nconsole.dir({bar: 'This is a console.dir message'});\n```\nResult:\n```console\n[26/06/2015 12:44:31.777] [LOG]   This is a console.log message\n[26/06/2015 12:44:31.777] [INFO]  This is a console.info message\n[26/06/2015 12:44:31.779] [WARN]  This is a console.warn message\n[26/06/2015 12:44:31.779] [ERROR] This is a console.error message\n[26/06/2015 12:44:31.779] [DIR]   { bar: 'This is a console.dir message' }\n```\nand\n```js\nrequire('console-stamp')(console, {\n    metadata: function () {\n        return ('[' + process.memoryUsage().rss + ']');\n    },\n    colors: {\n        stamp: 'yellow',\n        label: 'white',\n        metadata: 'green'\n    }\n});\n\nconsole.log('This is a console.log message');\nconsole.info('This is a console.info message');\nconsole.warn('This is a console.warn message');\nconsole.error('This is a console.error message');\nconsole.dir({bar: 'This is a console.dir message'});\n```\nResult:\n\n![Console](gfx/console.png)\n\n<a name=\"customconsole\"></a>\n### Custom Console [v0.2.4+]\n\nAs of version 0.2.4 you can also create a custom console with its own `stdout` and `stderr` like this:\n\n```js\nconst fs = require('fs');\nconst output = fs.createWriteStream('./stdout.log');\nconst errorOutput = fs.createWriteStream('./stderr.log');\nconst logger = new console.Console(output, errorOutput);\n\nconsole_stamp(logger, {\n    stdout: output,\n    stderr: errorOutput\n});\n```\n\nEverything is then written to the files.\n\n**NOTE:** If `stderr` isn't passed, warning and error output will be sent to the given `stdout`.\n\n\n### Custom Formatter Example\n\nCustom formatter using moment.js\n```js\nconst moment = require('moment');\nmoment.locale('ja');\n\nrequire('console-stamp')(console, {\n    formatter: function() {\n        return moment().format('LLLL');\n    }\n});\n\nconsole.log('This is a console.log message');\nconsole.info('This is a console.info message');\nconsole.warn('This is a console.warn message');\nconsole.error('This is a console.error message');\nconsole.dir({bar: 'This is a console.dir message'});\n```\n\nResult:\n```console\n[2016年5月12日午前11時10分 木曜日] [LOG]   This is a console.log message\n[2016年5月12日午前11時10分 木曜日] [INFO]  This is a console.info message\n[2016年5月12日午前11時10分 木曜日] [WARN]  This is a console.warn message\n[2016年5月12日午前11時10分 木曜日] [ERROR] This is a console.error message\n[2016年5月12日午前11時10分 木曜日] [DIR]   { bar: 'This is a console.dir message' }\n```\n<a name=\"custommethods\"></a>\n### Custom Methods\n\nThe **option.extend** option enables the extension or modification of the logging methods and their associated log levels:\n\nThe default logging methods and their log levels are as follows:\n\n```js\nconst levelPriorities = {\n    log: 4,\n    info: 3,\n    warn: 2,\n    error: 1,\n    assert: 2,\n    dir: 4\n};\n```\n\nCombined with the **include** option, the **extend** option enables the usage of custom console logging methods to be used with this module, for example:\n\n```js\n// Extending the console object with custom methods\nconsole.debug = function(msg) {\n    console.log(msg);\n}\nconsole.fatal = function(msg) {\n    console.log(msg);\n    process.exit(1);\n}\n\n// Initialising the output formatter\nrequire('console-stamp')(console, {\n    pattern: 'HH:MM:ss',\n    extend: {\n        debug: 5,\n        fatal: 0,\n    },\n    include: ['debug', 'info', 'warn', 'error', 'fatal'],\n    level: 'debug',\n});\n```\n\n**Note** how the `log` method is omitted from the `include` list. Because the custom functions call `console.log` internally, including the `log` method would print double-formatted output.\n\n### Adding Metadata ###\n\nTypes can be string, object (interpreted with util.inspect), or function.\nSee the [test-metadata.js](https://github.com/starak/node-console-stamp/blob/master/test-metadata.js) for examples.\n\n#### String example\n```js\nrequire('console-stamp')(console, {\n    pattern: 'HH:MM:ss.l',\n    metadata: '[' + process.pid + ']'\n});\n\nconsole.log('Metadata applied.');\n```\nResult:\n```console\n[26/06/2015 12:44:31.779] [LOG] [7785] Metadata applied.\n```\n\n#### Function example\n```js\nconst util = require('util');\n\nrequire('console-stamp')(console, {\n    pattern: 'HH:MM:ss.l',\n    metadata: function(){ return '[' + (process.memoryUsage().rss) + ']'; });\n\nconsole.log('Metadata applied.');\n```\n\nResult:\n\n    [18:10:30.875] [LOG] [14503936] Metadata applied.\n\n<a name=\"custom-pre-and-suffixes\"></a>\n### Custom prefix and suffix example\nIf you don't want to use the default brackets, you can also define your own custom pre- and suffixes like so:\n\n    require('console-stamp')(console, {\n        datePrefix: '####',\n        dateSuffix: '####',\n        labelPrefix: '{',\n        labelSuffix: '}'\n    });\n    \n    console.log('Custom pre- and suffixed log');\n\nResult:\n\n    ####Fri Sep 15 2017 16:58:29#### {LOG} Custom pre- and suffixed log                                                            \n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/starak/node-console-stamp.git"
  },
  "scripts": {
    "postinstall": "node ./msg.js"
  },
  "version": "0.2.9"
}
